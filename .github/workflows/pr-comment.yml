# This workflow comments on a PR with the results of the `cargo bloat check` and `hotpath profiling` performed in the CI workflow.
# This is a workaround for the limitations imposed by GitHub Actions on workflows triggered by pull requests from forked repositories.

# The restrictions apply to the pull_request event triggered by a fork opening a pull request in the upstream repository.
# - Events from forks cannot access secrets, except for the default GITHUB_TOKEN.
# - The GITHUB_TOKEN has read-only access when an event is triggered by a forked repository.
#
# These restrictions mean that during a pull_request event triggered by a forked repository,
# actions have no write access to GitHub resources and will fail on any attempt.
name: PR comment
on:
  workflow_run: # zizmor: ignore[dangerous-triggers]
    workflows: [CI]
    types: [completed]
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: The CI workflow that triggers the workflow run
        required: true

jobs:
  comment:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: dawidd6/action-download-artifact@20319c5641d495c8a52e688b7dc5fada6c3a9fbc # v8
        name: Download PR number
        with:
          name: pr-number
          run_id: ${{ github.event.workflow_run.id ||  github.event.inputs.workflow_run_id }}
          if_no_artifact_found: ignore
          allow_forks: true

      - name: Parse pull request number
        id: pr-number
        run: |
          if [[ -f pr-number ]]; then
            echo "pr-number=$(<pr-number)" >> "$GITHUB_OUTPUT"
          fi

      - uses: dawidd6/action-download-artifact@20319c5641d495c8a52e688b7dc5fada6c3a9fbc # v8
        name: "Download comparison results"
        id: download
        if: steps.pr-number.outputs.pr-number
        with:
          name: bloat-check-results|hotpath-results
          name_is_regexp: true
          workflow: ci.yml
          pr: ${{ steps.pr-number.outputs.pr-number }}
          workflow_conclusion: completed
          if_no_artifact_found: ignore
          allow_forks: true

      - name: Comment on PR
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        if: steps.download.outputs.found_artifact == 'true'
        env:
          PR_NUMBER: ${{ steps.pr-number.outputs.pr-number }}
        with:
          script: |
            const fs = require('node:fs');
            const bloatMarker = '<!-- prek-bloat-check -->';
            const hotpathMarker = '<!-- prek-hotpath-profiling -->';

            const { repo, owner } = context.repo;
            const prNumber = Number(process.env.PR_NUMBER);
            const errors = [];

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number: prNumber,
              per_page: 100,
            });

            const bloatExists = comments.find((comment) => comment.body?.includes(bloatMarker));
            const hotpathExists = comments.find((comment) => comment.body?.includes(hotpathMarker));

            try {
              const bloatComparison = await fs.promises.readFile('bloat-check-results/bloat_comparison.txt', 'utf8');
              const bloatBody = `${bloatMarker}\n${bloatComparison}`;

              if (bloatExists) {
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: bloatExists.id,
                  body: bloatBody,
                });
              } else {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: bloatBody,
                });
              }
            } catch (error) {
              console.error('Error commenting bloat result on PR:', error);
              errors.push(new Error(`Bloat comment failed: ${error.message}`));
            }

            try {
              const hotpathComparison = await fs.promises.readFile('hotpath-results/hotpath_comparison.txt', 'utf8');
              const hotpathBody = `${hotpathMarker}\n${hotpathComparison}`;

              if (hotpathExists) {
                await github.rest.issues.updateComment({
                  owner,
                  repo,
                  comment_id: hotpathExists.id,
                  body: hotpathBody,
                });
              } else {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: hotpathBody,
                });
              }
            } catch (error) {
              console.error('Error commenting hotpath result on PR:', error);
              errors.push(new Error(`Hotpath comment failed: ${error.message}`));
            }

            if (errors.length > 0) {
              const message = errors.map((err) => err.message).join('\n');
              throw new Error(message);
            }
